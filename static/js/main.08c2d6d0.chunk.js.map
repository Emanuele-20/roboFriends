{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2OAwBeA,EApBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAGxB,OAEI,sBAAKC,UAAU,qDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA4BH,EAA5B,cAErB,gCACI,6BAAKF,IACL,4BAAIC,WCgBLK,EA3BE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAKhB,OAEI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAGIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAJXM,EAAOG,GAAGR,UCS7BS,EApBG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEhB,OAEI,qBAAKT,UAAU,MAAf,SAEQ,uBACAA,UAAU,+BACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCJXI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAApE,SACKJ,EAAMK,YCkBJC,E,kDAnBX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,UAAU,GAHL,E,qDAOb,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG9B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,6DAEJG,KAAKX,MAAMK,a,GAhBCQ,aCmEZC,G,wDA5DX,aAAc,IAAD,8BACT,gBAmBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAnBzC,EAAKZ,MAAQ,CACTjB,OAAQ,GACR2B,YAAa,IAJR,E,qDASb,WAAoB,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GACH,OAAOA,EAASC,UAElBF,MAAK,SAAAG,GACN,EAAKZ,SAAS,CAACtB,OAAQkC,S,oBAa3B,WACA,MAAgCb,KAAKJ,MAA7BjB,EAAR,EAAQA,OAAQ2B,EAAhB,EAAgBA,YACVQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GACjC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASZ,EAAYW,kBAGzD,OAAStC,EAAOwC,OAGJ,sBAAK5C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAcgB,KAAKI,iBAM9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzB,OAAQmC,WAZtC,mD,GArCUM,IAAMlB,YCITmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAMjDX,M","file":"static/js/main.08c2d6d0.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nconst Card = ({name, email, id}) => {  //inside the parameter act destructuring, ES6\n\n\n    return(\n        \n        <div className='tc bg-light-red dib br3 pa3 ma2 grow bw2 shadow-5 '>\n            <img alt='robots' src = {`https://robohash.org/${id}?100x100`} />\n\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n\n        </div> \n        \n    );\n\n\n} \n \nexport default Card;\n\n// export default because I'm exporting just one thing and, inside the index.js file I'll import and descructure {  }","import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n    \n    // if (true) {\n    //     throw new Error(\"Noooooo !!!!\")\n    // }\n    return(\n\n        <div>\n            {\n                robots.map((user, i ) => {     // use map method to return multiple Card components\n                    return(\n                        <Card \n                            key= {robots[i].id} //Special case, check below\n\n                            id={robots[i].id} \n                            name={robots[i].name}\n                            email={robots[i].email}\n                        /> \n                    )\n                })\n            }\n        </div>\n\n    )\n\n}\n\nexport default CardList;\n\n\n//Special case: when we work with loops we MUST assign an unique key. \n//Becuse in case we wnat delete or modify \n//one card React won't know wich one we are referring to.","import React from 'react';\n\n\n\nconst SearchBox = ({searchChange}) => {\n\n    return(\n\n        <div className='pa2'>\n\n                <input \n                className='pa3 ba b--black bg-light-red'\n                type='search' \n                placeholder='search robots'\n                onChange={searchChange}   //is an event, every time the input changes\n                />\n                \n        </div>\n\n    )\n\n}\n\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n    return (\n        <div style={{overflow: 'scroll', border: '1px solid black', height: '600px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;\n\n//props\n//state\n// and now children concept","import React, { Component } from 'react';\n\n\nclass ErrorBoundry extends Component {\n    constructor(){\n        super();\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({ hasError: true })\n    }\n\n    render(){\n        if (this.state.hasError) {\n            return <h1>Ooops. That is not good !!!</h1>\n        }\n        return this.props.children //children will be everything in between ErrorBoundry\n    }\n}  \n\nexport default ErrorBoundry;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from \"../components/ErrorBoundry\"\nimport './App.css'\n\n\nclass App extends React.Component { \n\n    constructor(){\n        super()\n        this.state = {\n            robots: [], \n            searchfield: ''\n        } \n    }\n    //now APP owns that STATE that includes robots it is allow to changhe it\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')//nothing attached because fetch is a method built in the window object\n        .then(response => {\n           return response.json()\n        })\n        .then(users => { \n        this.setState({robots: users})\n        })\n    }\n\n\n    onSearchChange = (event) => { \n        this.setState({searchfield: event.target.value}) \n    }\n    //every time that input change (from searchBox we get an EVENT) \n    //because we want \"THIS\" to be linked to the App class and not to the <input> in SearchBox.js\n    //Every time we create our own method, use arrow function, \n\n\n    render(){\n    const { robots, searchfield } = this.state //refactoring  with destructuring\n    const filteredRobots = robots.filter(robot => {\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n\n    return  !robots.length ? \n        <h1>Loading......</h1> : //in case the loading of the robots will take different seconds\n            (\n                <div className=\"tc\"> \n                    <h1 className='f1'>RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    {/* here I want that everytime I write something inside the SearchBox\n                    something happen, like run the onSearchChange function, 2nd I have to pass that function \n                    inside the SearchBox component as props, 3rd I have to pass the onchange event into the \n                    SearchBox component (onChange={searchChange})*/}\n                    \n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots} />\n                            {/* instead pass all the robots, we pass just the filtered one inside the CardList component */}\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>   \n\n            )\n    }\n}\n\n\n    \n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'; \n\n\nReactDOM.render(<App />, document.getElementById('root')); \n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}